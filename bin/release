#!/bin/bash

VERSION=${1:-$(<./VERSION)}
isProduction=true

while getopts "v:" option
do
    case $option in
    (v) VERSION=$OPTARG ; [ $OPTARG == 'testing' ] && isProduction=false ;;
    (*) printf "Option inconue : '-%s'\n" "$opt" && exit 1 ;;
    esac
done

releaseName="Robert2-${VERSION}"
distFolder="./dist/${releaseName}"

echo "
  ____       _               _   ____
 |  _ \ ___ | |__   ___ _ __| |_|___ \\
 | |_) / _ \| '_ \ / _ \ '__| __| __) |
 |  _ < (_) | |_) |  __/ |  | |_ / __/
 |_| \_\___/|_.__/ \___|_|   \__|_____|

 \e[1m\e[34m* RELEASE ${VERSION} DISTRIBUTION SCRIPT *\e[0m

Commençons..."

if ! [ -x "$(command -v jq)" ]; then
    echo -e "\e[1m\e[31m\nERREUR: Le programme 'jq' est requis et ne semble pas installé.\e[0m" >&2
    exit 1
fi

if $isProduction; then
    echo -e "\e[1m\e[34m\nMet à jour le CHANGELOG et le fichier de version...\e[0m"
    CHANGELOG_REGEX="$VERSION\s+\(UNRELEASED\)"
    grep -i -E "$CHANGELOG_REGEX" ./CHANGELOG.md > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        read -p ">> Le CHANGELOG n'a pas pu être mis à jour automatiquement, voulez-vous continuer (y/n) ? " -n 1 -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "\e[1m\e[33m\nReleasing annulé.\e[0m"
            exit 1
        fi
    fi
    sed -i -E "s/$CHANGELOG_REGEX/$VERSION \($(date '+%Y-%m-%d')\)/i" ./CHANGELOG.md
    echo $VERSION > ./VERSION
else
    echo -e "\e[1m\e[33m\n** MODE TESTING ** → omission de la mise à jour du Changelog et de la version !\e[0m"
fi

echo -e "\e[1m\e[34m\nSuppression de l'ancien dossier \"dist\"...\e[0m"
rm -rf ./dist

echo -e "\e[1m\e[34mCompilation des sources du client...\e[0m"
(cd ./client && yarn install && yarn build)

echo -e "\e[1m\e[34m\nCopie des sources vers le dossier de distribution...\e[0m"
mkdir -p $distFolder
cp -r ./server/src dist
mv ./dist/src $distFolder/src

cp ./server/.htaccess $distFolder/.htaccess
cp ./server/composer.json $distFolder/composer.json
cp ./server/composer.lock $distFolder/composer.lock
cp ./README.md $distFolder/README.md
cp ./LICENCE.md $distFolder/LICENCE.md

rm $distFolder/src/VERSION
cp ./VERSION $distFolder/src/VERSION

rm $distFolder/src/public/webclient
cp -R ./client/dist $distFolder/src/public/webclient

echo -e "\e[1m\e[34mNettoyage du dossier de distribution (suppression des fichiers inutiles / privés)...\e[0m"
cd $distFolder
rm -r src/vendor
rm src/App/Config/settings.json
rm src/install/progress.json
rm -r src/var/cache && mkdir -m 777 src/var/cache/
rm -r src/var/logs && mkdir -m 777 src/var/logs/
rm -r src/var/tmp && mkdir -m 777 src/var/tmp/

echo -e "\e[1m\e[34mCréation du dossier des données privées...\e[0m"
mkdir -m 777 data/

echo -e "\e[1m\e[34mDéfinition des permission des dossiers...\e[0m"
chmod 777 src/App/Config
chmod 777 src/install

echo -e "\e[1m\e[34mInstallation des dépendances back...\e[0m"
query='del(."require-dev")|del(.autoload."psr-4"."Robert2\\Tests\\")|del(.autoload."psr-4"."Robert2\\Fixtures\\")|del(.scripts."create-migration")|del(.scripts."lint")|del(.scripts."test")|del(.scripts."testapi")|del(.scripts."testmodels")|del(.scripts."testother")'
jq $query composer.json > tmp.composer.json
mv tmp.composer.json composer.json
composer update --lock --quiet
composer install --quiet
echo "Done."

echo -e "\e[1m\e[34mEmpaquetage de la release dans un fichier ZIP...\e[0m"
cd .. && zip -r --quiet "${releaseName}.zip" $releaseName
echo "Done → Fichier dist/${releaseName}.zip"

echo -e "\e[1m\e[34mSuppression du dossier temporaire...\e[0m"
cd .. && rm -rf $distFolder

echo -e "\e[1m\e[32mTerminé !!\e[0m"
